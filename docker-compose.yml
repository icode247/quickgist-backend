# docker-compose.yml - PRODUCTION SETUP
version: '3.8'

services:
  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: blog_automation_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blog_automation

  # Backend API
  backend:
    build:
      context: ./scripts/backend
      dockerfile: Dockerfile
    container_name: blog_automation_backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CHROME_DRIVER_PATH=/usr/bin/chromedriver
      - HEADLESS_BROWSER=true
    volumes:
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./backups:/app/backups
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blog_automation

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog_automation_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=http://backend:5001
      - NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
      - NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - blog_automation

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blog_automation_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - blog_automation

volumes:
  redis_data:
    driver: local

networks:
  blog_automation:
    driver: bridge
